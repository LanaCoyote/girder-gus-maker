'use strict';

const game = window.game;

const Gus = require('./gus');
const GhostGirderMarker = require('./ghostGirderMarker');
const ParticleBurst = require("../particles/burst");

const COLLISION_GROUPS = require("../consts/collisionGroups");
const EPSILON = require("../consts").EPSILON;
const TAU = require("../consts").TAU;

class GhostGus extends Gus {
  constructor(x, y) {
    super(x, y, false);
    this.sprite.alpha = 0.5;

    this.startTime = game.time.now + 500;
    this.timingTolerance = -20; // in ms


    this.inputRecords = [{"INPUT":[1],"ENDTIME":23219},{"INPUT":[0],"ENDTIME":20151},{"INPUT":[2],"ENDTIME":20117},{"INPUT":[0],"ENDTIME":19233},{"INPUT":[1],"ENDTIME":18733},{"INPUT":[0],"ENDTIME":18550},{"INPUT":[2],"ENDTIME":18300},{"INPUT":[0],"ENDTIME":17716},{"INPUT":[1],"ENDTIME":17632},{"INPUT":[2],"ENDTIME":17266},{"INPUT":[1,2],"ENDTIME":16682},{"INPUT":[1],"ENDTIME":16665},{"INPUT":[0],"ENDTIME":16248},{"INPUT":[2],"ENDTIME":16032},{"INPUT":[0],"ENDTIME":15665},{"INPUT":[1],"ENDTIME":15648},{"INPUT":[0],"ENDTIME":15348},{"INPUT":[2],"ENDTIME":15265},{"INPUT":[0],"ENDTIME":15065},{"INPUT":[1],"ENDTIME":15048},{"INPUT":[0],"ENDTIME":13280},{"INPUT":[3],"ENDTIME":13264},{"INPUT":[0],"ENDTIME":13147},{"INPUT":[1],"ENDTIME":12830},{"INPUT":[2],"ENDTIME":12130},{"INPUT":[1],"ENDTIME":11213},{"INPUT":[0],"ENDTIME":10929},{"INPUT":[2],"ENDTIME":10913},{"INPUT":[0],"ENDTIME":9395},{"INPUT":[1],"ENDTIME":9379},{"INPUT":[2],"ENDTIME":8495},{"INPUT":[0],"ENDTIME":7170},{"INPUT":[1],"ENDTIME":7136},{"INPUT":[2],"ENDTIME":6786},{"INPUT":[1,2],"ENDTIME":6286},{"INPUT":[2],"ENDTIME":5902},{"INPUT":[0],"ENDTIME":900}];


    this.currentInputRecord = this.inputRecords.pop();
    this.currentInputRecord.hasBeenExecuted = false;

    this.courseCorrectionRecords = [{"X":4208.231201171875,"Y":503.6362838745117,"TIME":25503},{"X":3778.3963012695312,"Y":503.8192367553711,"TIME":25319},{"X":3372.7304077148438,"Y":504.00218963623047,"TIME":25136},{"X":2991.7041015625,"Y":504.18514251708984,"TIME":24953},{"X":2635.7977294921875,"Y":504.3680953979492,"TIME":24769},{"X":2305.5015563964844,"Y":504.5510482788086,"TIME":24586},{"X":2001.3154602050781,"Y":504.73400115966797,"TIME":24402},{"X":1723.7480163574219,"Y":504.91695404052734,"TIME":24219},{"X":1473.3187866210938,"Y":505.0999069213867,"TIME":24036},{"X":1250.5572509765625,"Y":505.2828598022461,"TIME":23852},{"X":1056.0027313232422,"Y":505.46581268310547,"TIME":23669},{"X":890.2053070068359,"Y":505.64876556396484,"TIME":23485},{"X":753.7258148193359,"Y":505.8317184448242,"TIME":23302},{"X":647.1360778808594,"Y":480.95874786376953,"TIME":23119},{"X":571.0192108154297,"Y":435.2058410644531,"TIME":22935},{"X":525.9695434570312,"Y":389.4529342651367,"TIME":22752},{"X":512.5929641723633,"Y":343.7166976928711,"TIME":22568},{"X":518.1015014648438,"Y":310.5585289001465,"TIME":22385},{"X":518.1285858154297,"Y":310.5585289001465,"TIME":22201},{"X":518.6458206176758,"Y":310.5585289001465,"TIME":22018},{"X":504.7117233276367,"Y":345.14293670654297,"TIME":21835},{"X":458.9588165283203,"Y":397.27088928222656,"TIME":21651},{"X":413.2059097290039,"Y":415.82923889160156,"TIME":21468},{"X":367.68638610839844,"Y":415.82923889160156,"TIME":21301},{"X":326.1412048339844,"Y":415.82923889160156,"TIME":21101},{"X":280.6883430480957,"Y":415.82923889160156,"TIME":20918},{"X":235.4353904724121,"Y":415.82923889160156,"TIME":20734},{"X":189.98252868652344,"Y":415.82923889160156,"TIME":20551},{"X":144.52964782714844,"Y":415.82923889160156,"TIME":20367},{"X":99.07672882080078,"Y":415.82923889160156,"TIME":20184},{"X":119.70884323120117,"Y":415.82923889160156,"TIME":20000},{"X":165.19508361816406,"Y":415.8290100097656,"TIME":19817},{"X":210.61458587646484,"Y":415.8223342895508,"TIME":19634},{"X":255.96750259399414,"Y":415.65155029296875,"TIME":19450},{"X":288.670597076416,"Y":411.3117218017578,"TIME":19267},{"X":288.670597076416,"Y":409.89933013916016,"TIME":19083},{"X":288.670597076416,"Y":409.88719940185547,"TIME":18900},{"X":288.670597076416,"Y":409.65511322021484,"TIME":18717},{"X":352.67417907714844,"Y":438.78780364990234,"TIME":18533},{"X":400.94635009765625,"Y":438.78780364990234,"TIME":18350},{"X":415.5905532836914,"Y":405.5296325683594,"TIME":18166},{"X":409.8995590209961,"Y":364.1194534301758,"TIME":17983},{"X":409.8915100097656,"Y":364.1194534301758,"TIME":17799},{"X":409.73793029785156,"Y":364.15687561035156,"TIME":17616},{"X":406.8009567260742,"Y":365.18707275390625,"TIME":17432},{"X":439.44217681884766,"Y":327.59403228759766,"TIME":17249},{"X":393.7559509277344,"Y":320.1666259765625,"TIME":17065},{"X":348.26976776123047,"Y":320.1666259765625,"TIME":16882},{"X":302.8335952758789,"Y":320.16815185546875,"TIME":16699},{"X":340.01773834228516,"Y":320.20687103271484,"TIME":16515},{"X":377.44457244873047,"Y":321.1994934082031,"TIME":16332},{"X":390.30433654785156,"Y":326.10107421875,"TIME":16148},{"X":390.30433654785156,"Y":326.12037658691406,"TIME":15965},{"X":390.30433654785156,"Y":326.4891815185547,"TIME":15782},{"X":414.9812316894531,"Y":313.81092071533203,"TIME":15598},{"X":415.8292007446289,"Y":359.3971252441406,"TIME":15415},{"X":415.82714080810547,"Y":367.64915466308594,"TIME":15231},{"X":415.7746124267578,"Y":326.2556457519531,"TIME":15048},{"X":414.42779541015625,"Y":371.7584991455078,"TIME":14865},{"X":409.8902893066406,"Y":383.8863754272461,"TIME":14681},{"X":409.72923278808594,"Y":383.81103515625,"TIME":14498},{"X":406.95350646972656,"Y":375.82801818847656,"TIME":14314},{"X":452.70641326904297,"Y":317.51373291015625,"TIME":14131},{"X":498.4593200683594,"Y":290.6138038635254,"TIME":13947},{"X":544.1122055053711,"Y":292.69859313964844,"TIME":13764},{"X":544.1122055053711,"Y":294.13259506225586,"TIME":13581},{"X":544.1795349121094,"Y":294.72360610961914,"TIME":13397},{"X":544.1757583618164,"Y":287.86672592163086,"TIME":13214},{"X":544.4021987915039,"Y":287.87763595581055,"TIME":13030},{"X":550.101432800293,"Y":287.8875541687012,"TIME":12847},{"X":550.1275253295898,"Y":287.8874969482422,"TIME":12664},{"X":550.6259918212891,"Y":287.7279853820801,"TIME":12480},{"X":531.6136169433594,"Y":332.62657165527344,"TIME":12297},{"X":494.1794204711914,"Y":390.5208206176758,"TIME":12113},{"X":539.9323272705078,"Y":414.9580764770508,"TIME":11930},{"X":585.5185317993164,"Y":414.7861099243164,"TIME":11746},{"X":606.198616027832,"Y":409.89978790283203,"TIME":11563},{"X":606.198616027832,"Y":409.8959732055664,"TIME":11380},{"X":606.198616027832,"Y":409.8232650756836,"TIME":11196},{"X":617.9093933105469,"Y":417.6801300048828,"TIME":11013},{"X":639.5463943481445,"Y":417.6801300048828,"TIME":10829},{"X":639.829216003418,"Y":372.1272659301758,"TIME":10646},{"X":639.829216003418,"Y":326.6910934448242,"TIME":10463},{"X":639.829216003418,"Y":281.204891204834,"TIME":10279},{"X":639.8286056518555,"Y":235.76871871948242,"TIME":10096},{"X":639.8124694824219,"Y":190.2992057800293,"TIME":9912},{"X":639.3986511230469,"Y":144.8463249206543,"TIME":9729},{"X":633.8998794555664,"Y":111.73815727233887,"TIME":9546},{"X":633.8977432250977,"Y":111.73815727233887,"TIME":9362},{"X":633.8570022583008,"Y":111.73815727233887,"TIME":9179},{"X":633.0785751342773,"Y":111.73815727233887,"TIME":8995},{"X":632.3582077026367,"Y":97.71251678466797,"TIME":8812},{"X":655.8970642089844,"Y":28.945188522338867,"TIME":8628},{"X":676.6940307617188,"Y":-17.26930856704712,"TIME":8445},{"X":630.9574508666992,"Y":-31.833438873291016,"TIME":8262},{"X":585.4545974731445,"Y":-31.83339834213257,"TIME":8078},{"X":539.9684143066406,"Y":-31.832280158996582,"TIME":7887},{"X":494.53224182128906,"Y":-31.803462505340576,"TIME":7703},{"X":452.95753479003906,"Y":-31.06431007385254,"TIME":7520},{"X":428.1180953979492,"Y":-25.89622974395752,"TIME":7336},{"X":428.12366485595703,"Y":-25.827865600585938,"TIME":7153},{"X":428.5526657104492,"Y":-24.520559310913086,"TIME":6970},{"X":393.54244232177734,"Y":-61.2952184677124,"TIME":6786},{"X":384.40303802490234,"Y":-15.592308044433594,"TIME":6603},{"X":390.10379791259766,"Y":25.749077796936035,"TIME":6419},{"X":390.17223358154297,"Y":25.749077796936035,"TIME":6236},{"X":391.4811706542969,"Y":25.749077796936035,"TIME":6052},{"X":366.6300582885742,"Y":59.59667205810547,"TIME":5869},{"X":412.28294372558594,"Y":63.82908344268799,"TIME":5686},{"X":457.75245666503906,"Y":63.824124336242676,"TIME":5519},{"X":503.1886291503906,"Y":63.696794509887695,"TIME":5319},{"X":539.9539947509766,"Y":60.43407440185547,"TIME":5135},{"X":544.1133499145508,"Y":57.886576652526855,"TIME":4952},{"X":544.1133499145508,"Y":57.860450744628906,"TIME":4769},{"X":544.1389846801758,"Y":57.143592834472656,"TIME":4585},{"X":544.1666412353516,"Y":89.58663940429688,"TIME":4402},{"X":544.1666412353516,"Y":135.07287979125977,"TIME":4218},{"X":544.1666412353516,"Y":180.50909042358398,"TIME":4035},{"X":544.1674423217773,"Y":222.09228515625,"TIME":3868},{"X":544.1888809204102,"Y":267.54512786865234,"TIME":3651},{"X":544.7392654418945,"Y":312.9813003540039,"TIME":3468},{"X":550.1039505004883,"Y":340.7304000854492,"TIME":3235},{"X":550.1759338378906,"Y":340.7304000854492,"TIME":3018},{"X":551.5519332885742,"Y":340.7304000854492,"TIME":2834},{"X":524.9103927612305,"Y":322.8239059448242,"TIME":2634},{"X":479.27417755126953,"Y":320.1666259765625,"TIME":2451},{"X":433.8213348388672,"Y":320.1666259765625,"TIME":2284},{"X":388.36849212646484,"Y":320.1666259765625,"TIME":2084},{"X":342.8989791870117,"Y":320.1666259765625,"TIME":1901},{"X":301.37622833251953,"Y":320.1666259765625,"TIME":1734},{"X":256.02331161499023,"Y":320.1666259765625,"TIME":1534},{"X":210.67039489746094,"Y":320.1676940917969,"TIME":1317},{"X":165.2175521850586,"Y":320.1947021484375,"TIME":1117},{"X":128.00000190734863,"Y":320.16666412353516,"TIME":850},{"X":128.00000190734863,"Y":320.16693115234375,"TIME":667},{"X":128.00000190734863,"Y":320.17547607421875,"TIME":483}];

    this.currentCourseCorrectionRecord = this.courseCorrectionRecords.pop();

    this.setCollision();

    this.marker = new GhostGirderMarker();
    this.marker.setMaster(this);

    console.log('Ghost Gus (a.k.a girder ghost) created.')
  }

  correctCourse() {
    this.sprite.body.x = this.currentCourseCorrectionRecord.X;
    this.sprite.body.y = this.currentCourseCorrectionRecord.Y;

    if (this.courseCorrectionRecords.length)
      this.currentCourseCorrectionRecord = this.courseCorrectionRecords.pop();
  }

  evaluateInputRecord() {

    if (this.currentInputRecord) {

      if (this.isRecordExpired() && this.currentInputRecord.hasBeenExecuted) {
        this.currentInputRecord = this.inputRecords.pop();
      }

      if (!this.currentInputRecord) return;

      this.currentInputRecord.INPUT.forEach(action => {
        switch (action) {
          case 1:
            this.walk('left');
            break;
          case 2:
            this.walk('right');
            break;
          case 3:
            this.marker.placeGirder();
            break;
          default:
            this.stop();
            break;
        }
      });

      this.currentInputRecord.hasBeenExecuted = true;
    }
  }

  getTime() {
    return game.time.now - this.startTime;
  }

  isRecordExpired() {
    const currentTime = this.getTime();
    const currentInputRecordEnd = this.currentInputRecord.ENDTIME;

    return currentTime >= currentInputRecordEnd - this.timingTolerance;
  }

  // diff from Gus's doom: doesn't unlock the dolly
  doom() {

    this.sprite.body.clearCollision();
    this.sprite.body.fixedRotation = false;

    this.sprite.body.velocity.x = Math.sin(this.rotation) * 250;
    this.sprite.body.velocity.y = Math.cos(this.rotation) * -250;

    this.sprite.body.angularVelocity = 30;
    //this.sprite.body.rotateRight( 360 );

  }

  setCollision() {
    this.sprite.body.setCollisionGroup(COLLISION_GROUPS.GHOST_PLAYER_SOLID);
    this.sprite.body.setCollisionGroup(COLLISION_GROUPS.GHOST_PLAYER_SENSOR, this.rotationSensor);
    this.sprite.body.collides([COLLISION_GROUPS.GHOST_BLOCK_ROTATE, COLLISION_GROUPS.BLOCK_SOLID, COLLISION_GROUPS.BLOCK_ROTATE, COLLISION_GROUPS.SPIKES]);
  }

  update() {
    if (Math.abs(Math.cos(this.rotation)) > EPSILON) this.sprite.body.velocity.x = 0;
    else this.sprite.body.velocity.y = 0;
    this.evaluateInputRecord();


    // check to see if we're rotating
    if (this.rotating) {
      // stop all movement
      this.stop();
      this.sprite.body.velocity.y = 0;
      this.sprite.body.velocity.x = 0;

      // create a rotate tween
      if (this.rotateTween === undefined) {
        this.rotateTween = game.add.tween(this.sprite).to({
            rotation: this.targetRotation
          }, 300, Phaser.Easing.Default, true)
          .onComplete.add(function() {
            this.rotation = this.targetRotation % (TAU); // keep angle within 0-2pi
            this.finishRotation();
          }, this);
      }

    } else if (!this.isDead) {

      // do gravity
      this.applyGravity();

      if (this.rotationSensor.needsCollisionData) {
        this.setCollision();
        this.rotationSensor.needsCollisionData = false;
      }

      this.marker.update()

      if (!this.isTouching("down")) {
        this.fallTime += game.time.physicsElapsedMS;

        if (this.fallTime > this.killTime) {
          this.kill();
        }

      } else {
        this.fallTime = 0;
      }

    }


    // course correction
    if (this.getTime() >= this.currentCourseCorrectionRecord.TIME) {
      this.correctCourse();
    }

  }
}

module.exports = GhostGus;
